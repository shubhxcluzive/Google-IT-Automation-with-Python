We just took a look at the read line and read methods, which allow us to read a single line of the file or the whole contents of the file right to the end. Along with this, file objects can be iterated in the same way as other Python sequences like list or strings. This is really useful when you want to process a file line by line. Say for example you want to make a whole line uppercase before printing it. You can do that with something like this.
Play video starting at 58 seconds and follow transcript0:58
Cool. Looks like that worked. But what are these weird empty lines between the contents? Any idea what's going on? What's happening is that the file has a new line character at the end of each line. So when Python reads the file line by line, the line variable will always have a new line character at the end. In other words, the newline character is not removed when calling read line. When we ask Python to print the line, the print function adds another new line character, creating an empty line. What can we do to avoid getting the empty lines? We can use a string method, strip to remove all surrounding white space, including tabs and new lines like this.
Play video starting at 2 minutes 6 seconds and follow transcript2:06
Awesome. Now that we use strip to remove the newline character, we get the output without empty lines, just like we wanted. Another way we can work with the contents of the file is to read the file lines into a list. Then, we can do something with the lists like sort contents. To do that, we open the file and use the.readlines method. Let's see how that looks. First, we open the file.
alertsssss
blurtssss